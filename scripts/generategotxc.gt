package main

import (
	. "builtin"
	"os"
	"path/filepath"
	"tk"
)

func main() {
	gopathT := os.Getenv("GOPATH")

	if gopathT == "" {
		pl("GOPATH not defined")
		return
	}

	sourceFileNameT := tk.JoinPath(gopathT, "/src/github.com/topxeq/gotx/gotx.go")

	fcT := tk.LoadStringFromFile(sourceFileNameT)

	if tk.IsErrorString(fcT) {
		pl("load source file failed: %v", tk.GetErrorString(fcT))
		return
	}

	foundT := tk.RegFindFirst(fcT, `(?m)// GUI related start[\s\S]*?// GUI related end`, 0)

	if tk.IsErrorString(foundT) {
		pl("GUI part not found, maybe not expected source file: %v", tk.GetErrorString(foundT))
		return
	}

	fcNewT := tk.RegReplace(fcT, `(?m)// GUI related start[\s\S]*?// GUI related end`, "")

	destPathT := tk.JoinPath(gopathT, "/src/gotxc")

	errT := os.RemoveAll(destPathT)

	if errT != nil {
		tk.Pl("failed to remove path: %v")
		return
	}

	tk.Pl("remove path %v: %v", destPathT, errT)

	tk.EnsureMakeDirs(destPathT)

	newFilePathT := tk.JoinPath(gopathT, "/src/gotxc/gotxc.go")

	rsT := tk.SaveStringToFile(fcNewT, newFilePathT)

	if tk.IsErrorString(rsT) {
		tk.Pl("failed to save destination file: %v", tk.GetErrorString(rsT))
		return
	}

	aryT := tk.GenerateFileListInDir(tk.JoinPath(gopathT, "/src/github.com/topxeq/gotx"), "*.go", true)
	// pl("%#v", aryT)

	lenT := len(aryT)

	for i, v := range aryT {
		fileNameT := filepath.Base(v)

		if tk.StartsWith(fileNameT, "gui_") {
			continue
		}

		if fileNameT == "gotx.go" {
			continue
		}

		srcT := tk.LoadStringFromFile(v)

		if tk.IsErrorString(srcT) {
			pl("failed to read source file [%v/%v] %v: %v", i, lenT, fileNameT, tk.GetErrorString(srcT))
			return
		}

		rs := tk.SaveStringToFile(srcT, tk.JoinPath(destPathT, fileNameT))

		if tk.IsErrorString(rs) {
			pl("failed to save source file [%v/%v] %v: %v", i, lenT, fileNameT, tk.GetErrorString(srcT))
			return
		}
	}

	pl("Done")
}
